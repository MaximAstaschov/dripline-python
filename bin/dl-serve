#!/usr/bin/env python

import datetime

import yaml

import dripline
import scarab

def create_object(a_config):
    module_name = a_config.pop('module')
    module_path = a_config.pop('module_path', False)
    extra_namespace = object()
    if module_path:
        try:
            extra_namespace = imp.load_source('extra_namespace', module_path)
        except IOError as e:
            print("unable to load source from: {}".format(module_path))
            raise e
    if hasattr(extra_namespace, module_name):
        module = getattr(extra_namespace, module_name)
    elif hasattr(dripline.core, module_name):
        module = getattr(dripline.core, module_name)
    #TODO this needs to be extended to include all of the relevant namespaces
    #     either plugins need to all populate a well defined set, or it should iterate over them
    else:
        raise NameError('no module "{}" in available namespaces'.format(module_name))
    the_object = module( **a_config )

    return the_object

def run(the_app):
    this_config = the_app.master_config
    print('python got a master config:\n{}'.format(this_config))
    print('       a default config:\n{}'.format(the_app.default_config))
    print('       a config file:\n{}'.format(the_app.config_filename))

    sig_handler = scarab.SignalHandler()
    the_config = yaml.safe_load(open("../examples/kv_store_tutorial.yaml", "r"))

    the_endpoints = the_config.pop("endpoints", [])

    the_service = create_object( the_config )
    the_service.enable_scheduling = True
    sig_handler.add_cancelable(the_service)

    all_endpoints = []
    for an_endpoint_conf in the_endpoints:
        an_endpoint = create_object(an_endpoint_conf)
        the_service.add_child( an_endpoint )
        all_endpoints.append(an_endpoint)
        if getattr(an_endpoint, 'log_interval', 0) > datetime.timedelta(seconds=0):
            print("queue up start logging for '{}'".format(an_endpoint.name))
            #action_id = the_service.schedule(an_endpoint.start_logging, datetime.datetime.now())
            an_endpoint.start_logging()
            #print("will start logging at {}".format(datetime.datetime.now() + the_service.execution_buffer*3))
            #action_id = the_service.schedule(an_endpoint.scheduled_log, an_endpoint.log_interval, datetime.datetime.now() + the_service.execution_buffer*3)

    print("about to start the service")
    the_service.start()
    print("services started, now to listen")
    the_service.listen()

if __name__ == '__main__':
    the_main = scarab.MainApp()
    config = {'dripline': dripline.core.DriplineConfig().to_python()}
    the_main.default_config = scarab.to_param(config, True)
    # add flags
    the_main.set_callback(lambda : run(the_main))
    import sys
    the_main.execute(sys.argv)
